// This file is automatically generated by ABP framework to use MVC Controllers from CSharp
using MasterAbp.Products;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Volo.Abp;
using Volo.Abp.Application.Dtos;
using Volo.Abp.DependencyInjection;
using Volo.Abp.Http.Client;
using Volo.Abp.Http.Client.ClientProxying;
using Volo.Abp.Http.Modeling;

// ReSharper disable once CheckNamespace
namespace MasterAbp.Controllers.Products;

[Dependency(ReplaceServices = true)]
[ExposeServices(typeof(IProductAppService), typeof(Product2ClientProxy))]
public partial class Product2ClientProxy : ClientProxyBase<IProductAppService>, IProductAppService
{
    public virtual async Task<ProductDto> CreateAsync(CreateUpdateProductDto input)
    {
        return await RequestAsync<ProductDto>(nameof(CreateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(CreateUpdateProductDto), input }
        });
    }

    public virtual async Task DeleteAsync(Guid id)
    {
        await RequestAsync(nameof(DeleteAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<ProductDto> GetAsync(Guid id)
    {
        return await RequestAsync<ProductDto>(nameof(GetAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<ListResultDto<CategoryLookupDto>> GetCategoriesAsync()
    {
        return await RequestAsync<ListResultDto<CategoryLookupDto>>(nameof(GetCategoriesAsync));
    }

    public virtual async Task<PagedResultDto<ProductDto>> GetListAsync(PagedAndSortedResultRequestDto input)
    {
        return await RequestAsync<PagedResultDto<ProductDto>>(nameof(GetListAsync), new ClientProxyRequestTypeValue
        {
            { typeof(PagedAndSortedResultRequestDto), input }
        });
    }

    public virtual async Task UpdateAsync(Guid id, CreateUpdateProductDto input)
    {
        await RequestAsync(nameof(UpdateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id },
            { typeof(CreateUpdateProductDto), input }
        });
    }
}
